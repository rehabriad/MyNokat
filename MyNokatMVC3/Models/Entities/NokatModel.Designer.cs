//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("NokatModel", "FK_Votes_Jokes", "Jokes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MyNokatMVC3.Models.Entities.Jokes), "Votes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MyNokatMVC3.Models.Entities.Votes), true)]

#endregion

namespace MyNokatMVC3.Models.Entities
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NokatModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new NokatModelContainer object using the connection string found in the 'NokatModelContainer' section of the application configuration file.
        /// </summary>
        public NokatModelContainer() : base("name=NokatModelContainer", "NokatModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NokatModelContainer object.
        /// </summary>
        public NokatModelContainer(string connectionString) : base(connectionString, "NokatModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NokatModelContainer object.
        /// </summary>
        public NokatModelContainer(EntityConnection connection) : base(connection, "NokatModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Jokes> Jokes
        {
            get
            {
                if ((_Jokes == null))
                {
                    _Jokes = base.CreateObjectSet<Jokes>("Jokes");
                }
                return _Jokes;
            }
        }
        private ObjectSet<Jokes> _Jokes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Votes> Votes
        {
            get
            {
                if ((_Votes == null))
                {
                    _Votes = base.CreateObjectSet<Votes>("Votes");
                }
                return _Votes;
            }
        }
        private ObjectSet<Votes> _Votes;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Jokes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToJokes(Jokes jokes)
        {
            base.AddObject("Jokes", jokes);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Votes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVotes(Votes votes)
        {
            base.AddObject("Votes", votes);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NokatModel", Name="Jokes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Jokes : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Jokes object.
        /// </summary>
        /// <param name="jokeId">Initial value of the JokeId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="joke">Initial value of the Joke property.</param>
        /// <param name="addDate">Initial value of the AddDate property.</param>
        public static Jokes CreateJokes(global::System.Int32 jokeId, global::System.Int64 userId, global::System.String joke, global::System.DateTime addDate)
        {
            Jokes jokes = new Jokes();
            jokes.JokeId = jokeId;
            jokes.UserId = userId;
            jokes.Joke = joke;
            jokes.AddDate = addDate;
            return jokes;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 JokeId
        {
            get
            {
                return _JokeId;
            }
            set
            {
                if (_JokeId != value)
                {
                    OnJokeIdChanging(value);
                    ReportPropertyChanging("JokeId");
                    _JokeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("JokeId");
                    OnJokeIdChanged();
                }
            }
        }
        private global::System.Int32 _JokeId;
        partial void OnJokeIdChanging(global::System.Int32 value);
        partial void OnJokeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int64 _UserId;
        partial void OnUserIdChanging(global::System.Int64 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Joke
        {
            get
            {
                return _Joke;
            }
            set
            {
                OnJokeChanging(value);
                ReportPropertyChanging("Joke");
                _Joke = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Joke");
                OnJokeChanged();
            }
        }
        private global::System.String _Joke;
        partial void OnJokeChanging(global::System.String value);
        partial void OnJokeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AddDate
        {
            get
            {
                return _AddDate;
            }
            set
            {
                OnAddDateChanging(value);
                ReportPropertyChanging("AddDate");
                _AddDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AddDate");
                OnAddDateChanged();
            }
        }
        private global::System.DateTime _AddDate;
        partial void OnAddDateChanging(global::System.DateTime value);
        partial void OnAddDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NokatModel", "FK_Votes_Jokes", "Votes")]
        public EntityCollection<Votes> Votes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Votes>("NokatModel.FK_Votes_Jokes", "Votes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Votes>("NokatModel.FK_Votes_Jokes", "Votes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NokatModel", Name="Votes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Votes : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Votes object.
        /// </summary>
        /// <param name="voteId">Initial value of the VoteId property.</param>
        /// <param name="jokeId">Initial value of the JokeId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="voteType">Initial value of the VoteType property.</param>
        public static Votes CreateVotes(global::System.Int32 voteId, global::System.Int32 jokeId, global::System.Int64 userId, global::System.Boolean voteType)
        {
            Votes votes = new Votes();
            votes.VoteId = voteId;
            votes.JokeId = jokeId;
            votes.UserId = userId;
            votes.VoteType = voteType;
            return votes;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 VoteId
        {
            get
            {
                return _VoteId;
            }
            set
            {
                if (_VoteId != value)
                {
                    OnVoteIdChanging(value);
                    ReportPropertyChanging("VoteId");
                    _VoteId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("VoteId");
                    OnVoteIdChanged();
                }
            }
        }
        private global::System.Int32 _VoteId;
        partial void OnVoteIdChanging(global::System.Int32 value);
        partial void OnVoteIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 JokeId
        {
            get
            {
                return _JokeId;
            }
            set
            {
                OnJokeIdChanging(value);
                ReportPropertyChanging("JokeId");
                _JokeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("JokeId");
                OnJokeIdChanged();
            }
        }
        private global::System.Int32 _JokeId;
        partial void OnJokeIdChanging(global::System.Int32 value);
        partial void OnJokeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int64 _UserId;
        partial void OnUserIdChanging(global::System.Int64 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean VoteType
        {
            get
            {
                return _VoteType;
            }
            set
            {
                OnVoteTypeChanging(value);
                ReportPropertyChanging("VoteType");
                _VoteType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VoteType");
                OnVoteTypeChanged();
            }
        }
        private global::System.Boolean _VoteType;
        partial void OnVoteTypeChanging(global::System.Boolean value);
        partial void OnVoteTypeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NokatModel", "FK_Votes_Jokes", "Jokes")]
        public Jokes Jokes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Jokes>("NokatModel.FK_Votes_Jokes", "Jokes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Jokes>("NokatModel.FK_Votes_Jokes", "Jokes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Jokes> JokesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Jokes>("NokatModel.FK_Votes_Jokes", "Jokes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Jokes>("NokatModel.FK_Votes_Jokes", "Jokes", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
